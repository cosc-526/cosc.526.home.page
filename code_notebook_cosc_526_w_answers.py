# -*- coding: utf-8 -*-
"""code.notebook.cosc.526.w.Answers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kp-HXxbpljzYfzH9kWEWwVEe23Z6q8Mp

# **`M1 - Module 1`**

## **M1.8. Python Exercise**

1.   Import and manipulate a .csv file  
2.   Assess your Python Programming Skills  

*  Other assignments are more challenging. Use this one to assess your skills.
*  Attempt to solve the problems without searching for online assistance.
*  Prepare resource questions for the class discussion to help source additional tools.

### 1.8.0 **Import** data from Github URL, .csv. or kaggle api
"""

#in notebook and colab use !pip freeze to check for specific library
#!pip freeze | grep <library_name> command, where <library_name>
!pip freeze | grep pandas
!pip freeze | grep numpy
!pip freeze | grep matplotlib

#use the following if 
#!pip install kaggle

#=> Read Data
#=> from a url into pandas or once loaded in notebook
import pandas as pd

url = "https://raw.githubusercontent.com/cosc-526/cosc.526.home.page/main/d.M.1.10.assignment.covid.data.variants.csv"
df = pd.read_csv(url)
print("==> ready! <==")

#Optional, kaggle direct; need an account and an API!

#!mkdir ~/.kaggle
!cp /content/kaggle.json ~/.kaggle/   #need to use your kaggle api key
'chmod 600 /root/.kaggle/kaggle.json'
kaggle.api.authenticate()
print("==> ready!<==")

"""### 1.8.1. **Inspect**"""

## Enter solution here

"""#### **`1.8.0 Solution`**  """

import kaggle
import pandas as pd

!kaggle datasets download -d gpreda/covid19-variants

# Load the downloaded CSV file into a pandas DataFrame
df = pd.read_csv('covid19-variants.zip')

# Display the first few rows of the DataFrame
print(df.head())
print("==> descriptive statistics <==")
print(round(df.describe()),1)

"""* The covid dataset is from a [this Kaggle page](https://www.kaggle.com/yamqwe/omicron-covid19-variant-daily-cases?select=covid-variants.csv) and a copy is also in the class repository.  
* It contains data about the processing of COVID-19 sequences by different countries over time.  
* It is comma-separated value (.csv) file with the following six columns.  

**=> Dataset Fields <=**  
1. `location`: the country for which the information is provided  
2. `date`: the date of the data entry  
3. `variant`: the COVID-19 variant for the data entry  
4. `num_sequences`: the number of sequences **processed** (for the country, variant, and date)  
5. `num_sequences_total`: the number of sequences **available** (for the country, variant, and date)  
6. `perc_sequences`: the percentage of available number of sequences that were processed (*Note: this value is out of 100*)  

note: each dataset row represents the processing of *one* variant by *one* country on *one* day.

### 1.8.1. Find Uncommon Variants

The 3 main variants of COVID-19 that we've experienced in the US are:  

*  `Alpha`  
*  `Delta`  
*  `Omicron`  

**Tasks**
1. What other variants are recognized by the World Health Organization (WHO) in this dataset?  

2. Sort the variant names alphanumerically and store in a list.  

**Note:** exclude in output `on_who` and `others` from `variant`
"""

# Enter solution here

"""#### **`1.8.1 Solution`**  
*  pandas function df.select_dtypes() gets a list of column names but excludes data types we don't need; int64, float64

* **`didn't think to use data types?`** here they are: 
https://pandas.pydata.org/docs/reference/arrays.html

* Use for loop to iterate through each non-numeric column name and call pd.crosstab() to create a frequency distribution for each column.

* Note that pd.crosstab() can also take multiple column names as arguments, allowing you to create cross-tabulations for multiple categorical variables at once
"""

import pandas as pd

# Create a list of columns without integer or decimal numbers
mylist_No_Numbers = df.select_dtypes(exclude=['int64', 'float64']).columns.tolist()

#remove the date variable for a cleaner view
mylist_No_Numbers.remove('date')
print("list category names are: ",mylist_No_Numbers)
print("------------------------------------------")
# Loop through each non-numeric column and display a crosstab of data
print("My summary of all categories ")
for col in mylist_No_Numbers:
    print(pd.crosstab(index=df[col], columns='count'))

# filter out catch all categories
unwanted_categories = ['non_who','others']
mylist_filtered = [category for category in df['variant'] if category not in unwanted_categories]
mylist_filtered.sort()
print(pd.crosstab(index=mylist_filtered, columns='count'))
print("total.categories=",len(pd.crosstab(index=mylist_filtered,columns='count')))

print(round(df.describe()),1)
# Filter out the "others" and "non_who" variant categories
df = df[df.variant.isin(['Alpha', 'Beta', 'Delta', 'Gamma', 'Lambda', 'Omicron'])]

# Group the data by the "variant" variable and count the occurrences
variant_counts = df.groupby('variant').size().reset_index(name='count')

# Print the resulting table
print(variant_counts)

"""### 1.8.2. Find the Most Processed Variant

Determine which variant of COVID-19 has the most sequences processed.

"""

## Write here your code

"""### 1.8.3. Find Best Country at Processing All Sequences

Determine which country did the best at processing sequences across **all** variants (including "catch all" categories).

The output should be the name of a single country.

"""

## Write here your code

"""### 1.8.4a. Find Best Country at Processing Specific Sequences

Determine which country did the best at processing sequences across the Alpha, Delta, and Omicron variants.

The output should be the name of a single country.

"""

## Write here your code

"""### 1.8.4b. Find the Ranking of the US at Processing Specific Sequences

Determine the ranking of the US at processing sequences across the Alpha, Delta, and Omicron variants.

Store the ranking as an integer.

*Note: the best country has a ranking of 1, but indexing in Python starts at 0.*

*Note: in Jupyter, variables from already executed code cells are available in other code cells. This means you shouldn't have to copy and paste code from problem 4a.*
"""

## Write here your code

"""### 1.8.5. Find the Number of Processed Sequences Per Country on Date

Determine each country's total number of processed sequences for the Omicron variant on December 27, 2021.

Sort the output from the highest number of processed sequences to the smallest number of processed sequences.

Store the result as a list of tuples, with each tuple containing the country name first and the number of processed sequences second.

"""

## Write here your code

"""### 1.8.6. Find Percentage of Sequences Processed in the US

Determine the percentage of processed sequences for the Alpha, Delta, and Omicron variants in the US.

Store the result as a dictionary where keys are variant names and values are percentages.

"""

## Write here your code

"""### 1.8.7. Report any assignment challenges"""

# Write here your answer

"""## **M.1 Assignment.1**

# **`M2 - Module 2`**

descrition here

## steps
"""